# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Build and deploy my Next.js resume to Github Pages

on:
  # # Runs on pushes targeting the default branch
  push:
    branches: ['main']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: 'pages'
  cancel-in-progress: false

env: # DÃ©finition des variables d'environnement au niveau du job
  DATOCMS_API_URL: ${{ secrets.DATOCMS_API_URL }}
  DATOCMS_API_KEY: ${{ secrets.DATOCMS_API_KEY }}
  NEXT_PUBLIC_BASE_PATH: ${{ vars.NEXT_PUBLIC_BASE_PATH }}
  NEXT_PUBLIC_EXPORT: ${{ vars.NEXT_PUBLIC_EXPORT }}
  STATIC_DEPLOYMENT: ${{ vars.STATIC_DEPLOYMENT }}

jobs:
  # Preliminary job to check NEXT_PUBLIC_EXPORT
  check_var:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - name: Github context
        run: echo "$GITHUB_CONTEXT"
      - name: Check NEXT_PUBLIC_EXPORT environment variable exists
        id: check
        run: |
          if [[ -z "${{ env.NEXT_PUBLIC_EXPORT }}" ]]; then
            echo "La variable d'environnement NEXT_PUBLIC_EXPORT n'existe pas ou est vide."
            exit 1
          fi

  # Build job
  build:
    runs-on: ubuntu-latest
    needs: check_var
    steps:
      - name: Check environment variable
        run: echo 'NEXT_PUBLIC_EXPORT=' ${{ env.NEXT_PUBLIC_EXPORT }} && echo 'NEXT_PUBLIC_BASE_PATH=' ${{ env.NEXT_PUBLIC_BASE_PATH }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine packager manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Setup Pages
        uses: actions/configure-pages@v3
        # with:
        #   # Automatically inject basePath in your Next.js configuration file and disable
        #   # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
        #   #
        #   # You may remove this line if you want to manage the configuration yourself.
        # static_site_generator: next
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build with Next.js and generate out folder for static hosting
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./out
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3

  # Deployment job
  deploy:
    # execute only on main branch
    if: github.ref == 'refs/heads/main'

    needs: build

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
